<?xml version="1.0" encoding="utf-8"?> <feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[Category: Gems | function Blog() {};]]></title><link href="http://lunchub.github.io/blog/categories/gems/atom.xml" rel="self"/><link href="http://lunchub.github.io/"/> <updated>2013-08-01T21:37:15+09:00</updated> <id>http://lunchub.github.io/</id> <author> <name><![CDATA[Daisuke Masuyama]]></name> </author> <generator uri="http://octopress.org/">Octopress</generator> <entry><title type="html"><![CDATA[[Rails] ActiveAdmin + cocoon を使い始めた際にハマったこと]]></title><link href="http://lunchub.github.io/blog/2013/08/01/hamari-on-starting-to-use-cocoon-gem/"/> <updated>2013-08-01T21:25:00+09:00</updated> <id>http://lunchub.github.io/blog/2013/08/01/hamari-on-starting-to-use-cocoon-gem</id> <content type="html"><![CDATA[<h2>Environment</h2><p><code> Mac OSX 10.7.5 (Lion) ruby 1.9.3p392 (2013-02-22 revision 39386) [x86_64-darwin11.4.2] Rails 3.2.13 [Gems] activeadmin (0.6.0) formtastic (2.2.1) cocoon (1.2.0) </code></p><h2>Issues</h2><ul><li><p><code>Missing partial</code> エラー</p></li><li><p><code>undefined local variable or method</code> エラー</p></li><li><p><code>link_to_add_association</code>の永久ループ</p></li><li><p>show画面やedit画面にアップロードした画像を表示させたい</p><ul><li>アップロードできても確認ができないとねえ・・</li><li>これは<code>cocoon</code>というより<code>formtastic</code>の使い方の問題かな</li></ul></li></ul><h2>Solution &amp; How to</h2><h3>Missing partial エラー</h3><h4>partialに分割する必要がある</h4><p><code>render_association</code>で呼び出すため。</p><p><code>link_to_add_association -&gt; render_association</code> ```ruby vendor/bundle/ruby/1.9.1/gems/cocoon-1.2.0/lib/cocoon/view_helpers.rb#L.34</p><pre><code>def render_association(association, f, new_object, render_options={}, custom_partial=nil)
  partial = get_partial_path(custom_partial, association)
  ...
end
</code></pre><p>```</p><h4>partialの名前に注意（単数形であること）</h4><p><code>get_partial_path</code>が単数系を期待しているため。</p><p><code>link_to_add_association -&gt; render_association -&gt; get_partial_path</code> ```ruby vendor/bundle/ruby/1.9.1/gems/cocoon-1.2.0/lib/cocoon/view_helpers.rb#L.98</p><pre><code>def get_partial_path(partial, association)
  partial ? partial : association.to_s.singularize + "_fields"
end
</code></pre><p>```</p><h3>undefined local variable or method エラー</h3><p><code>link_to_add_association</code>と同じパーシャルを使うので、<code>link_to_add_association</code>の引数と同じ名前のローカル変数を割り当てなくてはいけない。</p><p>当然パーシャル側の変数も合わせる。</p><p>```haml _form.html.haml</p><pre><code>.attachments_fields
  = f.semantic_fields_for :attachments do |att|
    = render 'attachment_fields',  :f =&gt; att # attを f に割り当てる
  .links
    = link_to_add_association 'add image',  f,  :attachments # f を割り当てる
</code></pre><p>```</p><p>```haml _attachment_fields.html.haml</p><pre><code>.nested-fields
  = f.inputs do # f に固定する
    = f.input :attachment, as: :file
    = link_to_remove_association "remove image", f
</code></pre><p>```</p><h3>link_to_add_associationの永久ループ</h3><p><code>link_to_add_association</code>の置き場所がまずかった。</p><p><code>f.semantic_fields_for</code>と同じ階層にいなくてはいけない。</p><p>```haml NG pattern</p><pre><code>  = f.semantic_fields_for :attachments do |att|
    = render 'attachment_fields', :f =&gt; att
    .links
      = link_to_add_association 'add image', f, :attachments
</code></pre><p><code> </code>haml OK pattern</p><pre><code>  = f.semantic_fields_for :attachments do |att|
    = render 'attachment_fields', :f =&gt; att
  .links
    = link_to_add_association 'add image', f, :attachments
</code></pre><p>```</p><h3>show画面やedit画面にアップロードした画像を表示させたい</h3><h4>show画面の場合</h4><p><code>image_tag</code>を使った。 ```ruby app/admin/works.rb ActiveAdmin.register Work do show do |work|</p><pre><code>div work.title
work.attachments.each do |att|
  div image_tag att.attachment_url.to_s
end
</code></pre><p> end … end ```</p><h4>edit画面の場合</h4><p><code>formtastic</code>の領域なので、<code>template_tag</code>を使った。 ```haml app/views/admin/works/_attachment_fields.html.haml = f.inputs do</p><pre><code>= f.input :attachment, as: :file
= f.template.image_tag f.object.attachment_url.presence || nil
= link_to_remove_association "remove image", f
</code></pre><p>```</p><h2>Mutter</h2><p>なんか・・<code>link_to_add_association</code>に依存しすぎな気がする・・</p><h2>References</h2><ul><li><a href="https://github.com/nathanvda/cocoon">[GitHub] cocoon</a></li></ul><p><section class="ads"><div class="amzimg"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774146633/lunchub-22/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51%2BUj1CI5tL._SX280_CR0,0,280,230_.jpg" alt="Ruby on Rails 3 アプリケーションプログラミング"/></a></div><div class="amzimg"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797363827/lunchub-22/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51hvKPIWmdL._SX280_CR2,75,278,230_.jpg" alt="Rails3レシピブック 190の技"/></a></div></section></p> ]]></content> </entry> <entry><title type="html"><![CDATA[inherited_resourcesによって変更された，scaffoldの挙動を元に戻す方法]]></title><link href="http://lunchub.github.io/blog/2013/07/29/how-to-disable-the-scaffold-behavior-that-has-changed-by-inherited_resources/"/> <updated>2013-07-29T11:41:00+09:00</updated> <id>http://lunchub.github.io/blog/2013/07/29/how-to-disable-the-scaffold-behavior-that-has-changed-by-inherited_resources</id> <content type="html"><![CDATA[<h2>Environment</h2><p><code> Mac OSX 10.7.5 (Lion) ruby 1.9.3p392 (2013-02-22 revision 39386) [x86_64-darwin11.4.2] Rails 3.2.13 [Gems] activeadmin (0.6.0) inherited_resources (1.4.0) </code></p><h2>Issues</h2><p><code>active_admin</code>をインストールした後から，<code>scaffold</code>や<code>rails g controller</code>を実行すると，必ず自動生成されたコントローラが，<code>InheritedResources</code>を継承した状態になっている． <code>inherited_resources</code>を使いたくない場面もあるので，デフォルトでこの状態になるのは好ましくない．</p><h3>Factor</h3><ul><li><code>active_admin</code>をインストールすると，<code>inherited_resources</code>もインストールされる．</li><li><code>inherited_resources</code>がデフォルトの<code>scaffold</code>の挙動を書き換える</li></ul><p>以下の<code>config.app_generators</code>の部分で，<code>:inherited_resources_controller</code>を設定している． ```ruby vendor/bundle/ruby/1.9.1/gems/inherited_resources-1.4.0/lib/inherited_resources.rb#L25 class Railtie &lt; ::Rails::Engine config.inherited_resources = InheritedResources if config.respond_to?(:app_generators)</p><pre><code>config.app_generators.scaffold_controller = :inherited_resources_controller
</code></pre><p> else</p><pre><code>config.generators.scaffold_controller = :inherited_resources_controller
</code></pre><p> end end ```</p><h2>Solution</h2><ul><li><code>config/application.rb</code>にコードを追加する</li></ul><h2>How to</h2><p><code>cofig/application.rb</code>に以下のコードを追加する <code>ruby config/application.rb class Application &lt; Rails::Application config.app_generators.scaffold_controller = :scaffold_controller # 追加 end </code></p><p><code>:scaffold_controller</code>の元ネタはどこだよということで探してみると，<br/> <code>vendor/bundle/ruby/1.9.1/gems/railties-3.2.11/lib/rails/generators.rb</code>で見つかった．</p><p>```ruby vendor/bundle/ruby/1.9.1/gems/railties-3.2.11/lib/rails/generators.rb#L50 DEFAULT_OPTIONS = { :rails => {</p><pre><code>....
:scaffold_controller =&gt; :scaffold_controller,
...
</code></pre><p> }, …. } <code>`` </code>inherited_resources<code>が書き換えてるのはこの</code>DEFAULT_OPTIONS<code>の値なので， それを元の値である</code>:scaffold_controller`に戻せば良い．</p><h3>Doubt</h3><h4>どうしてこの方法で<code>config</code>の値を再設定できるのか</h4><p>Railsの初期化の順序的に<code>config/boot.rb(load gems) -&gt; config/application.rb</code>だから． （間違っていたら指摘してください＞＜；）</p><h4><code>gems</code>の中での読み込み順</h4><p>これって<code>inherited_resources</code>の読み込みが<code>railties</code>より先か後かで挙動が変わるのだろうか・・<br/> この辺りの<code>Rails</code>のデフォルトの挙動を上書きする辺りがいまいちしっくりこない・・</p><h2>References</h2><ul><li><a href="https://github.com/josevalim/inherited_resources/issues/195">[GitHub] any way to permit ‘rails scaffold’ to work normally if inherited_resources used by another gem?</a></li><li><a href="http://guides.rubyonrails.org/generators.html">[RailsGuides] generators</a></li><li><a href="http://guides.rubyonrails.org/engines.html">[RailsGuides] engines</a></li></ul><p><section class="ads"><div class="amzimg"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774146633/lunchub-22/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51%2BUj1CI5tL._SX280_CR0,0,280,230_.jpg" alt="Ruby on Rails 3 アプリケーションプログラミング"/></a></div><div class="amzimg"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797363827/lunchub-22/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51hvKPIWmdL._SX280_CR2,75,278,230_.jpg" alt="Rails3レシピブック 190の技"/></a></div></section></p> ]]></content> </entry> <entry><title type="html"><![CDATA[CarrierWaveからAmazon S3に画像アップロードできない]]></title><link href="http://lunchub.github.io/blog/2013/07/14/hamari-on-carrierwave-with-amazon-s3/"/> <updated>2013-07-14T20:18:00+09:00</updated> <id>http://lunchub.github.io/blog/2013/07/14/hamari-on-carrierwave-with-amazon-s3</id> <content type="html"><![CDATA[<h2>Environment</h2><p><code> Mac OSX 10.7.5 (Lion) ruby 1.9.3p392 (2013-02-22 revision 39386) [x86_64-darwin11.4.2] Rails 3.2.13 [Gems] CarrierWave (0.8.0) fog (1.12.1) </code></p><h2>Issues</h2><p><a href="/blog/2013/07/14/how-to-use-carrierwave-with-amazon-s3/">CarrierWaveでアップロード先をAmazon S3に設定する方法</a>等という記事を書いておきながら，<br/> 以下のエラーが表示され，全くアップロードができない．</p><p><code> bad URI(is not URI?) </code></p><h2>Solution</h2><p>Carrierwaveの設定(initializer)を見直す．</p><ul><li><code>fog_credentials</code>の<code>:host</code>と<code>:endpoint</code>は特に指定がない場合はコメントアウトする</li></ul><p>例えば以下の設定ファイルだとエラーで死にます．</p><p>``` ruby config/initializer/carrierwave.rb CarrierWave.configure do |config| config.fog_credentials = {</p><pre><code>:provider               =&gt; 'AWS',                           # required
:aws_access_key_id      =&gt; ENV["AWS_S3_KEY_ID"],            # required
:aws_secret_access_key  =&gt; ENV["AWS_S3_SECRET_ACCESS_KEY"], # required
:region                 =&gt; 'ap-northeast-1',                # optional,  defaults to 'us-east-1'
:host                   =&gt; '',                              # optional,  defaults to nil
:endpoint               =&gt; ''                               # optional,  defaults to nil
</code></pre><p> } config.fog_directory = ‘myapp-carrierwave’ # required config.fog_public = false # optional, defaults to true config.fog_attributes = {‘Cache-Control’=>‘max-age=82800’} # optional, defaults to {} end ```</p><p>これのどこが問題かというと，<code>fog_credentials</code>の<code>:host</code>と<code>:endpoint</code>が<code>empty string</code>であるところ，<br/> ソースのコメントを見ると（元ソースはCarrierWaveのドキュメントから），<br/> optionalと書いてある．<br/> つまりここは何も書かなくても動くんだ！という認識だったのだけど，そこが甘かった．<br/> <code>何も書かなくていい ≠ empty string</code>ということなので，ここには<code>nil</code>を指定するか，<br/> 行ごとコメントアウトしておかなければならない．</p><p>CarrierwaveからFogへのエラースタックを追いかけて行くと，</p><p><code>ruby lib/fog/aws/storage.rb 411 @scheme = options[:scheme] || DEFAULT_SCHEME 412 @port = options[:port] || DEFAULT_SCHEME_PORT[@scheme] 413 @path_style = options[:path_style] || false 414 end 415 416 @connection = Fog::Connection.new("#{@scheme}://#{@host}:#{@port}#{@path}", @persistent, @connection_options) 417 end 418 419 def reload 420 @connection.reset 421 end </code></p><p><code>options</code>で渡ってくる値が<code>nil</code>であれば<code>DEFAULT_</code>値が指定される．<br/> しかしここで<code>empty string</code>が渡ってくると，<code>@scheme</code>等の値が<code>empty string</code>になってしまう．<br/> その結果<code>@connection</code>の組立に失敗して，アップロード先が見つからねーと怒られるみたいです．</p><p>私の場合は，特にこれらの値の指定は不要だったため，<br/> 行ごとコメントアウトしたところ，うまくアップロードできるようになりました！:)</p><h2>References</h2><ul><li><a href="http://stackoverflow.com/questions/15717368/uploading-image-to-s3-using-carrierwave-and-fogs-bad-uri">[Stackoverflow] uploading image to s3 using carrierwave and fogs bad uri</a></li><li><a href="https://github.com/carrierwaveuploader/carrierwave">[GitHub] CarrierWave</a></li></ul><p><section class="ads"><div class="amzimg"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774146633/lunchub-22/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51%2BUj1CI5tL._SX280_CR0,0,280,230_.jpg" alt="Ruby on Rails 3 アプリケーションプログラミング"/></a></div><div class="amzimg"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797363827/lunchub-22/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51hvKPIWmdL._SX280_CR2,75,278,230_.jpg" alt="Rails3レシピブック 190の技"/></a></div></section></p> ]]></content> </entry> <entry><title type="html"><![CDATA[CarrierWaveでアップロード先をAmazon S3に設定する方法]]></title><link href="http://lunchub.github.io/blog/2013/07/14/how-to-use-carrierwave-with-amazon-s3/"/> <updated>2013-07-14T17:25:00+09:00</updated> <id>http://lunchub.github.io/blog/2013/07/14/how-to-use-carrierwave-with-amazon-s3</id> <content type="html"><![CDATA[<h2>Environment</h2><p><code> Mac OSX 10.7.5 (Lion) ruby 1.9.3p392 (2013-02-22 revision 39386) [x86_64-darwin11.4.2] Rails 3.2.13 [Gems] CarrierWave (0.8.0) fog (1.12.1) </code></p><h2>Precondition</h2><ul><li><p><code>Amazon S3</code>を利用するためには，<code>Amazon Web Services (AWS)</code>への登録が必要です．</p><ul><li><a href="/blog/2013/07/13/how-to-register-for-aws/">AWSへの登録記事はこちら</a></li></ul></li><li><p><code>CarrierWave</code>の設定時に，<code>Amazon S3</code>のBucket情報が必要なため，Bucketが作成されていなければなりません．</p><ul><li><a href="/blog/2013/07/14/how-to-create-bucket-on-amazon-s3/">Amazon S3にBucketを作成する方法はこちら</a></li></ul></li></ul><h2>Issues</h2><p>CarrierWaveのアップロード先をAmazon S3に設定したい．</p><p>Herokuを使ってRailsアプリを運用しているものの, Herokuではファイルをサーバ上に保存することができないため，<br/> 画像アップロード等は別のサーバに行う必要があります．<br/> そこで今回は，非常に低価格でクラウドストレージを扱うことのできる<code>Amazon S3</code>をアップロード先に指定しました．</p><h2>How to</h2><h3>Gemを追加する</h3><p><code>text Gemfile gem "fog", "~&gt; 1.3.1" </code></p><h3>initializerを追加する</h3><p>ここに<code>Amazon S3</code>の情報を設定します．<br/> ``` ruby config/initializer/carrierwave.rb CarrierWave.configure do |config| config.fog_credentials = {</p><pre><code>:provider               =&gt; 'AWS',                           # required
:aws_access_key_id      =&gt; ENV["AWS_S3_KEY_ID"],            # required
:aws_secret_access_key  =&gt; ENV["AWS_S3_SECRET_ACCESS_KEY"], # required
:region                 =&gt; 'ap-northeast-1',                # optional,  defaults to 'us-east-1'
# :host                   =&gt; '',                              # optional,  defaults to nil
# :endpoint               =&gt; ''                               # optional,  defaults to nil
</code></pre><p> } config.fog_directory = ‘myapp-carrierwave’ # required config.fog_public = false # optional, defaults to true config.fog_attributes = {‘Cache-Control’=>‘max-age=82800’} # optional, defaults to {} end ```</p><ul><li>IDとシークレットアクセスキーは，環境変数に設定しておいたほうが良いです．<ul><li>ベタ書きだとGitHubにソースコードをアップしている際等に危険です．</li></ul></li><li><code>:region</code>の入力は任意ですが，'tokyo'リージョンを使用している場合は変更が必要です． => <code>ap-northeast-1</code></li><li><code>config.fog_directory</code>はBucketの名前です．</li><li><code>config.fog_public</code>は<code>false</code>に設定しておくことで，Rails経由でのアクセスしか<code>Amazon S3</code>上のファイルにアクセスできなくなります．</li></ul><h3>Uploaderクラスのプロパティ値を変更する</h3><p>``` ruby APP_ROOT_PATH/app/uploaders/image_uploader.rb</p><h1>encoding: utf-8</h1><p>class ImageUploader &lt; CarrierWave::Uploader::Base # storage :file storage :fog end ```</p><h2>References</h2><p><a href="https://github.com/carrierwaveuploader/carrierwave">[GitHub] carrierwave</a></p><p><section class="ads"><div class="amzimg"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774146633/lunchub-22/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51%2BUj1CI5tL._SX280_CR0,0,280,230_.jpg" alt="Ruby on Rails 3 アプリケーションプログラミング"/></a></div><div class="amzimg"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797363827/lunchub-22/" rel="nofollow" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51hvKPIWmdL._SX280_CR2,75,278,230_.jpg" alt="Rails3レシピブック 190の技"/></a></div></section></p> ]]></content> </entry> </feed>