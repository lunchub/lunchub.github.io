<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[function Blog() {};]]></title>
  <link href="http://lunchub.github.io/atom.xml" rel="self"/>
  <link href="http://lunchub.github.io/"/>
  <updated>2013-09-15T18:08:47+09:00</updated>
  <id>http://lunchub.github.io/</id>
  <author>
    <name><![CDATA[Daisuke Masuyama]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressで記事の生成を高速化する方法]]></title>
    <link href="http://lunchub.github.io/blog/2013/09/13/how-to-improve-generating-a-post-faster-on-octopress/"/>
    <updated>2013-09-13T21:45:00+09:00</updated>
    <id>http://lunchub.github.io/blog/2013/09/13/how-to-improve-generating-a-post-faster-on-octopress</id>
    <content type="html"><![CDATA[<h2>Issues</h2>

<p><code>Octopress</code>で新しい記事を作成したり、既存の記事の編集の際に、<code>rake preview</code>や<code>rake generate</code>の実行に非常に時間が
かかってしまい、編集の効率が悪い。</p>

<h3>Factor</h3>

<p><code>Octopress</code>は、<code>preview</code>や<code>generate</code>の際、<code>source/_posts</code>配下にある記事を全て静的なHTMLへと再生成してしまうため。
記事の数が増えるほど、生成にかかる時間が増してしまうため。</p>

<h2>Solution</h2>

<ul>
<li><code>rake isolate[filename]</code>と、<code>rake integrate</code>を使用する</li>
</ul>


<h2>How to</h2>

<h3><code>rake isolate[filename]</code>と、<code>rake integrate</code>を使用する</h3>

<h4>rake isolate[filename]</h4>

<p><code>rake isolate[filename]</code>は、<code>filename</code>に指定したファイル名と一致しない記事ファイルを、
全て<code>source/_stash</code>に退避してくれる。これにより、<code>preview</code>や<code>generate</code>の際、生成のために参照する記事数が
圧倒的に少なくなるため、生成に要する時間が短縮される。</p>

<p>この<code>filename</code>に指定するファイル名は部分一致が可能なので、ファイル名をフルで指定する必要はない。
例えばこの記事のファイル名は<code>2013-09-13-how-to-improve-generating-a-post-faster-on-octopress.markdown</code>なので、
<code>faster-on-octopress</code>とでも指定しておけば問題ない。</p>

<h4>rake integrate</h4>

<p><code>rake integrate</code>は前述の<code>rake isolate[filename]</code>で退避したファイルを全て<code>source/_posts</code>に戻してくれる。</p>

<h2>Conclusion</h2>

<p>新規記事の作成や、記事の更新の手順は以下の通り。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>新規記事 or 更新対象記事 のファイル名（filename）を確認する。
</span><span class='line'>↓
</span><span class='line'>rake isolate[filename]
</span><span class='line'>↓
</span><span class='line'>rake preview や rake generate を使用しながら対象記事を編集する
</span><span class='line'>↓
</span><span class='line'>rake integrate
</span><span class='line'>↓
</span><span class='line'>rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<p>この方法はあくまで「新規記事の作成」と「記事の更新」を高速化するものなので、
記事の生成処理自体が早くなるわけではなく、最終的な<code>rake gen_deploy</code>は早くならないのが微妙なところ。</p>

<p>一応別の記事で解説予定の、「高速化パッチの当たったRuby」を使用することで生成速度はだいぶ改善される。</p>

<h2>Mutter</h2>

<p>記事のタイムスタンプをチェックするとかで、この回避策使わなくていいようにできないのかなあ・・<br/>
差分がなければスルーして欲しいところ。</p>

<h2>References</h2>

<p><section class="ads">
</section></p>
]]></content>
  </entry>
  
</feed>
